---
import Brand from "./Brand.astro";
import Dropdown from "./Dropdown.astro";
import ButtonDarkMode from "./ButtonDarkMode.astro";
import Container from "./Container.astro";
// import ButtonDarkMode from "@/components/ButtonDarkMode.svelte";

const LINKS = [
  {
    name: "Experiencia",
    url: "/#experiencia",
  },
  {
    name: "Proyectos",
    url: "/#proyectos",
  },
  {
    name: "Sobre m√≠",
    url: "/#sobremi",
  },
];
---

<header
  id="header"
  class="bg-white dark:bg-slate-800
  sticky top-0 z-50"
>
  <Container class="flex justify-between items-center">
    <div
      id="section-non-sticky"
      class="flex justify-between items-center pt-1"
    >
      <ul class="flex">
        {
          LINKS.map(({ name, url }) => (
            <a
              class="p-2.5 md:p-4 flex justify-center items-center 
                font-semibold text-sm md:text[15px] text-slate-700 dark:text-white
                border-b-[3px] border-transparent hover:border-b-teal-400
              hover:bg-secondary-200 dark:hover:bg-slate-700 rounded-md
                "
              href={url}
            >
              {name}
            </a>
          ))
        }
      </ul>
    </div>
    <div
      class="sr-only flex justify-between w-full items-center py-2 pr-2"
      id="section-sticky"
    >
      <div class="flex gap-x-3 justify-center items-center">
        <Brand />
        <div>
          <h1 class="flex items-end gap-x-3">
            <span class="text-xl font-bold text-nowrap"
              >Jose Flores</span
            >
          </h1>
        </div>
      </div>
      <div class="flex gap-x-5 items-center w-fit">
        <Dropdown />
      </div>
    </div>
    <ButtonDarkMode />
  </Container>
</header>

<script>
  const header = document.querySelector("#header");
  const navbar = document.querySelector("#section-non-sticky");
  const navbarSticky = document.querySelector("#section-sticky");

  const callback = (entrada, observador) => {
    const elementHeader = entrada[0];
    if (elementHeader.isIntersecting) {
      navbar.classList.add("sr-only");

      navbarSticky.classList.remove("sr-only");
    } else {
      navbar.classList.remove("sr-only");
      navbarSticky.classList.add("sr-only");
    }
  };

  const observador = new IntersectionObserver(callback, {
    threshold: 0.1, // [0.1, 0.3]
    rootMargin: "0px 0px -95% 0px",
  });

  observador.observe(header);
</script>
